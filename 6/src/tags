!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
Edge	Edge.java	/^	public Edge(Node tail, Node head, int realCapacity, int capacity) {$/;"	m	class:Edge
Edge	Edge.java	/^public class Edge {$/;"	c
Node	Node.java	/^	public Node(int id) {$/;"	m	class:Node
Node	Node.java	/^public class Node {$/;"	c
Parser	Parser.java	/^	public Parser (String fileName) throws FileNotFoundException {$/;"	m	class:Parser
Parser	Parser.java	/^	public Parser() {$/;"	m	class:Parser
Parser	Parser.java	/^public class Parser {$/;"	c
RailroadPlanning	RailroadPlanning.java	/^public class RailroadPlanning {$/;"	c
ResidualGraph	ResidualGraph.java	/^	public ResidualGraph(Node source, Node sink) {$/;"	m	class:ResidualGraph
ResidualGraph	ResidualGraph.java	/^public class ResidualGraph {$/;"	c
addBackwardEdge	Node.java	/^	public void addBackwardEdge(Edge edge) {$/;"	m	class:Node
addEdges	Node.java	/^	public void addEdges(List<Node> list, Collection<Node> discovered) {$/;"	m	class:Node
addEdgesHelper	Node.java	/^	private void addEdgesHelper(List<Node> list, Collection<Node> discovered, Map<Node, Edge> edges) {$/;"	m	class:Node	file:
addForwardEdge	Node.java	/^	public void addForwardEdge(Edge edge) {$/;"	m	class:Node
augment	Edge.java	/^	public void augment(int discrepance) {$/;"	m	class:Edge
augmentNextPath	ResidualGraph.java	/^	public void augmentNextPath() {$/;"	m	class:ResidualGraph
augmentPathTo	Node.java	/^	public void augmentPathTo(Node adjacentNode, int discrepance) {$/;"	m	class:Node
backwardEdges	Node.java	/^	private Map<Node, Edge> backwardEdges;$/;"	f	class:Node	file:
bottleneck	ResidualGraph.java	/^	private int bottleneck() {$/;"	m	class:ResidualGraph	file:
capacity	Edge.java	/^	private int capacity;$/;"	f	class:Edge	file:
edgeCapacityTo	Node.java	/^	public int edgeCapacityTo(Node head) {$/;"	m	class:Node
equals	Node.java	/^	public boolean equals(Object other) {$/;"	m	class:Node
existsPathToSink	ResidualGraph.java	/^	public boolean existsPathToSink(int capacityLowCut) {$/;"	m	class:ResidualGraph
findEdgesNotIn	Node.java	/^	public void findEdgesNotIn(Collection<Node> nodeSet, Collection<Edge> edgeSet) {$/;"	m	class:Node
flow	ResidualGraph.java	/^	private int flow;$/;"	f	class:ResidualGraph	file:
forwardEdges	Node.java	/^	private Map<Node, Edge> forwardEdges;$/;"	f	class:Node	file:
getCapacity	Edge.java	/^	public int getCapacity() {$/;"	m	class:Edge
getFlow	ResidualGraph.java	/^	public int getFlow() {$/;"	m	class:ResidualGraph
getHead	Edge.java	/^	public Node getHead() {$/;"	m	class:Edge
getHeadIfHasFlow	Edge.java	/^	public Node getHeadIfHasFlow() {$/;"	m	class:Edge
getLargestCapacity	Parser.java	/^	public int getLargestCapacity() {$/;"	m	class:Parser
getRealCapacity	Edge.java	/^	public int getRealCapacity() {$/;"	m	class:Edge
getResidualGraph	Parser.java	/^	public ResidualGraph getResidualGraph() {$/;"	m	class:Parser
hashCode	Node.java	/^	public int hashCode() {$/;"	m	class:Node
head	Edge.java	/^	private Node head;$/;"	f	class:Edge	file:
id	Node.java	/^	private int id;$/;"	f	class:Node	file:
largestCapacity	Parser.java	/^	private int largestCapacity;$/;"	f	class:Parser	file:
main	RailroadPlanning.java	/^	public static void main(String[] args) {$/;"	m	class:RailroadPlanning
minCutString	ResidualGraph.java	/^	public String minCutString() {$/;"	m	class:ResidualGraph
nbrEdges	Node.java	/^	public int nbrEdges() {$/;"	m	class:Node
nextPath	ResidualGraph.java	/^	private LinkedList<Node> nextPath;$/;"	f	class:ResidualGraph	file:
pushAdjacentHelper	Node.java	/^	private int pushAdjacentHelper(LinkedList<Node> stack, Map<Node, Edge> edges, int capacityLowCut) {$/;"	m	class:Node	file:
pushAdjacentNodes	Node.java	/^	public int pushAdjacentNodes(LinkedList<Node> list, int capacityLowCut) {$/;"	m	class:Node
pushHead	Edge.java	/^	public boolean pushHead(LinkedList<Node> stack, int capacityLowCut) {$/;"	m	class:Edge
putAdjacentHelper	Node.java	/^	private void putAdjacentHelper(LinkedList<Node> list, Collection<Node> discovered, Map<Node, Edge> edges) {$/;"	m	class:Node	file:
putAdjacentNodes	Node.java	/^	public void putAdjacentNodes(LinkedList<Node> list, Collection<Node> discovered) {$/;"	m	class:Node
putHead	Edge.java	/^	public void  putHead(LinkedList<Node> list, Collection<Node> discovered) {$/;"	m	class:Edge
realCapacity	Edge.java	/^	private int realCapacity;$/;"	f	class:Edge	file:
run	RailroadPlanning.java	/^	public void run(ResidualGraph residualGraph, int largestCapacity) {$/;"	m	class:RailroadPlanning
scanner	Parser.java	/^	private Scanner scanner;$/;"	f	class:Parser	file:
sink	ResidualGraph.java	/^	private Node sink;$/;"	f	class:ResidualGraph	file:
sinkDFS	ResidualGraph.java	/^	public LinkedList<Node> sinkDFS(Collection<Node> discovered, LinkedList<Node> dfsStack, int capacityLowCut) {$/;"	m	class:ResidualGraph
source	ResidualGraph.java	/^	private Node source;$/;"	f	class:ResidualGraph	file:
tail	Edge.java	/^	private Node tail;$/;"	f	class:Edge	file:
toString	Edge.java	/^	public String toString() {$/;"	m	class:Edge
toString	Node.java	/^	public String toString() {$/;"	m	class:Node
